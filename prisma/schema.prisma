// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator erd {
  provider = "prisma-erd-generator"
  // The directory where the ERD will be generated
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  name            String
  role            Role           @default(USER)
  phoneNumber     String
  // As a customer booking services
  bookings        Booking[]      @relation("UserBookings")
  // As an admin handling bookings
  handledBookings Booking[]      @relation("AdminHandledBookings")
  // User's feedback
  feedbacks       Feedback[]
  // User's notifications
  notifications   Notification[]
  // User's analytics
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  imageKey        String
  imageUrl        String
  status          UserStatus     @default(ACTIVE)
  changedPassword Boolean        @default(true)
  delFlag         Boolean        @default(false)
}

model Service {
  id          String      @id @default(uuid())
  name        String
  description String?
  bookings    Booking[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  type        ServiceType
  delFlag     Boolean     @default(false)
}

model Booking {
  id String @id @default(uuid())

  user   User   @relation("UserBookings", fields: [userId], references: [id])
  userId String

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  // Admin who handled this booking (optional)
  admin   User?   @relation("AdminHandledBookings", fields: [adminId], references: [id])
  adminId String?

  status BookingStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment       Payment?
  Feedback      Feedback?
  delFlag       Boolean       @default(false)
  price         Float?
  location      String
  subscription  Subscription?
  startTime     DateTime
  addtionalNote String?
  renewalDay    Int?
  
}

model Payment {
  id        String        @id @default(uuid())
  booking   Booking       @relation(fields: [bookingId], references: [id])
  bookingId String        @unique
  amount    Float
  status    PaymentStatus @default(PENDING)
  paidAt    DateTime      @default(now())
}

model Feedback {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  rating    Int      @default(0)
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String   @unique // one feedback per booking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delFlag   Boolean  @default(false)
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String // e.g., "BOOKING", "PAYMENT", "SYSTEM"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delFlag   Boolean  @default(false)
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
  REFUNDED
}

enum UserStatus {
  BANNED
  DELETED
  ACTIVE
}

enum ServiceType {
  SECURITY
  CLEANING
  COMBINED
}

enum Subscription {
  MONTHLY
  WEEKLY
  YEARLY
}
